# Generated by Django 5.2 on 2025-05-08 03:09

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app', '0015_merge_0009_userpracticelog_0014_alter_useraudio_user'),
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('description', models.TextField()),
                ('icon_url', models.CharField(blank=True, help_text='URL or path to an icon image', max_length=255, null=True)),
                ('achievement_type', models.CharField(choices=[('streak', 'Streak Based'), ('challenge_completion', 'Challenge Completion Based'), ('points_earned', 'Points Earned Based'), ('other', 'Other')], default='other', max_length=30)),
                ('criteria', models.JSONField(default=dict, help_text='JSON criteria to unlock this achievement')),
                ('points_reward', models.PositiveIntegerField(default=0, help_text='Points awarded when achieving this')),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Challenge Category',
                'verbose_name_plural': 'Challenge Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserChallengeStreak',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='challenge_streak', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('current_streak_days', models.PositiveIntegerField(default=0)),
                ('longest_streak_days', models.PositiveIntegerField(default=0)),
                ('last_challenge_completed_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('points_reward', models.PositiveIntegerField(default=100, help_text='Points awarded for completing the entire challenge')),
                ('start_date', models.DateTimeField(blank=True, help_text='When the challenge becomes available (optional)', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='When the challenge ends (optional)', null=True)),
                ('duration_days', models.PositiveIntegerField(blank=True, help_text='Alternative to end_date, duration in days from start_date or creation', null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Manually activate/deactivate. Can also be computed.')),
                ('level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenges', to='app.level')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenges', to='app.challengecategory')),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'ordering': ['-start_date', 'title'],
            },
        ),
        migrations.CreateModel(
            name='ChallengeExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of this exercise within the challenge')),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercises', to='app.challenge')),
                ('speaking_text', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_exercises', to='app.speakingtext')),
            ],
            options={
                'verbose_name': 'Challenge Exercise',
                'verbose_name_plural': 'Challenge Exercises',
                'ordering': ['challenge', 'order'],
                'unique_together': {('challenge', 'speaking_text', 'order')},
            },
        ),
        migrations.CreateModel(
            name='UserChallengeAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='not_started', max_length=20)),
                ('points_earned', models.PositiveIntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts_by_users', to='app.challenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Challenge Attempt',
                'verbose_name_plural': 'User Challenge Attempts',
                'ordering': ['-started_at'],
                'unique_together': {('user', 'challenge')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achieved_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='earned_by_users', to='app.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'ordering': ['-achieved_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='UserChallengeExerciseAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False)),
                ('score_at_completion', models.FloatField(blank=True, help_text='Score from UserPracticeLog at the time of completion', null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('challenge_exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts_by_users', to='app.challengeexercise')),
                ('user_challenge_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_attempts', to='app.userchallengeattempt')),
                ('user_practice_log', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='challenge_exercise_attempt', to='app.userpracticelog')),
            ],
            options={
                'verbose_name': 'User Challenge Exercise Attempt',
                'verbose_name_plural': 'User Challenge Exercise Attempts',
                'ordering': ['challenge_exercise__order'],
                'unique_together': {('user_challenge_attempt', 'challenge_exercise')},
            },
        ),
    ]
